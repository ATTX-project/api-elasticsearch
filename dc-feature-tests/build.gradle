apply plugin: 'com.chrisgahlert.gradle-dcompose-plugin'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.DockerWaitContainer

dependencies {
    testCompile \
        'junit:junit:4.10',
        'info.cukes:cucumber-java8:1.2.5',
        'info.cukes:cucumber-junit:1.2.5',
        'com.mashape.unirest:unirest-java:1.4.9',
        'org.skyscreamer:jsonassert:1.4.0',
        'org.awaitility:awaitility-groovy:2.0.0',
        'org.uh.hulib.attx.dev:dev-test-helper:1.3'
}

if (!project.hasProperty("testEnv") || project.testEnv == "dev") {
    ext.testSet = "localhost"
} else if (project.testEnv == "CI"){
    ext.testSet = "container"
} else {
    throw new GradleException("Build project environment option not recognised.")
}

ext {
    testImageWF = "latest"
    testImageGM = "latest"
    testImageFuseki = "latest"
    testImageES5 = "latest"
    testImageESSiren = "latest"
    testImageUVShared = "latest"
    testImageATTXDPUs = "latest"
}

dcompose {
    createComposeFile.useTags = true
    registry ("$registryURL") {
        // no user/pass
    }
    networks {
        dcTest
    }

    essiren {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/essiren:${testImageESSiren}"
        networks = [dcTest]
        hostName = 'essiren'
        if (testSet == "localhost") {
            portBindings = ['9200:9200', '9300:9300']
        }
    }

    es5 {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/attx-es5:${testImageES5}"
        networks = [dcTest]
        dependsOn = [essiren]
        hostName = 'es5'
        if (testSet == "localhost") {
            portBindings = ['9210:9210', '9310:9310']
        }
    }

    test {
        ignoreExitCode = true
        baseDir = file('.')
        dockerFilename = 'Dockerfile'
        if (testSet == "container") {
            binds = ["/var/run/docker.sock:/run/docker.sock"]
        }
        dependsOn = [essiren, es5]
        command = ['sh', '-c', '/tmp/runTests.sh']
        waitForCommand = true
        forceRemoveImage = true
        attachStdout = true
        networks = [dcTest]
    }
}

task copyReportFiles(type: DcomposeCopyFileFromContainerTask) {
    service = dcompose.test
    containerPath = '/tmp/build/reports/tests'
    destinationDir = file("build/reports/")
    cleanDestinationDir = false
}

startTestContainer.finalizedBy copyReportFiles

shadowJar {
    classifier = 'tests'
    from sourceSets.test.output
    configurations = [project.configurations.testRuntime]
}

buildTestImage.dependsOn shadowJar
buildTestImage.dependsOn testClasses

// TO DO: Figure out if we need the attxDPU container
//task checkDPUDone(type: DockerWaitContainer) {
//    dependsOn startEs5Container
//    targetContainerId {dcompose.attxdpus.containerId}
//    doLast{
//        if(getExitCode() != 0) {
//            println "ATTX DPU Container failed with exit code \${getExitCode()}"
//        } else {
//            println "Everything is peachy."
//        }
//    }
//}
//
//startTestContainer.dependsOn checkDPUDone

task runContainerTests {
    dependsOn startTestContainer
    finalizedBy removeImages
    doLast {
        if(dcompose.test.exitCode != 0){ throw new GradleException("Tests within the container Failed!") }
    }
}

// TO DO: find a fix so we can run the test locally preferably while waiting for other stuff to be there. MYSQL is the one that we need to wait for.

task runIntegTests(type: Test) {
//  dependsOn checkDPUDone
    dependsOn startEs5Container

    doFirst {
        systemProperty 'essiren.port', dcompose.essiren.findHostPort(9200)
        systemProperty 'essiren.tcp', dcompose.essiren.findHostPort(9300)
        systemProperty 'essiren.host', dcompose.essiren.dockerHost
        systemProperty 'es5.port', dcompose.es5.findHostPort(9210)
        systemProperty 'es5.host', dcompose.es5.dockerHost
    }
    doLast {
        systemProperties.remove 'essiren.port'
        systemProperties.remove 'essiren.tcp'
        systemProperties.remove 'essiren.host'
        systemProperties.remove 'es5.port'
        systemProperties.remove 'es5.host'
    }
    finalizedBy removeImages
}


